                tcamake

Overview:

'tcamake' is a build environment for code projects using GNU make. 
It is not its own make implementation. It simply uses Gnu make providing 
a powerful build environment. The goal is to provide a clean and 
simple method of managing a large project's dependencies. 

I have used this system reliably for years and serves as my excuse to 
avoid the GNU autoconf toolset. In fact, while certainly not as powerful 
as the autotools, this Makefile template heirarchy lends itself nicely 
as a build system alternative to the autotools.  It is surprisingly 
capable and relatively easy to manage many projects that may very well use 
autotools anyway. Essentially, if nothing else, it serves as a nice 
build system for very large projects (A 'large' project is considered 
to be a build 'environment' consisting of many projects that have a 
complicated inner-dependency as well as including external projects both 
directly and by reference, ie. a group of projects.)

'tcamake' is nothing more than a common Makefile include that defines 
all of the dependencies and inner-dependencies of projects within the build
system. It does not determine compiler capabilities and library function 
checks like the Gnu autotools, at that level, individual (sub)projects 
would likely still incorporate GNU autoconf.


Layout:

The build environment is specific to a directory structure starting with 
a root directory that is referred to as $TOPDIR. This can be for a 
specific project or group of projects as needed.  The term project is 
used loosely to define the encompassing environment that may, in fact, 
contain many projects. 

An instance of 'tcamake' build environment should exist at any 
project 'top-level'. For example, assume we have the following code 
repository, '~/src/svn/projectX'. projectX is considered the build 
root or TOPDIR. The build system is always at the top-level which 
would be '$TOPDIR/tcamake' or in our case, '~/src/svn/projectX/tcamake'.

Each Makefile beneath the top-level defines the TOPDIR variable to point 
to the relative root of the project/environment tree.  Additionally, each 
Makefile 'includes' $TOPDIR/tcamake/builddefs. 

A given build environment could potentially have more than one top-level 
directory. Each top-level is essentially a Makefile that includes 
'./tcamake/projectdefs'. This simply allows some global project settings
that sublevel Makefiles might need. One important define set by the 
project settings is TCAMAKE_PROJECT. Once this is set, a sub-level 
can easily determine the context in which it was called.


The Files:

  depends
        - Defines all of our project dependencies. Generally, this is 
        the only file that ever needs updating.

  projectdefs 
        - This should be included once by a top-level Makefile.

  builddefs    
        - This is included by sub-level Makefiles and pulls in the 
        needed dependencies.

  autodepend
        - defines our dependency and build commands, included by depends.

  environment
        - is included at each level by the builddefs to initiate the 
        desired compiler flags and other platform specific macros.

